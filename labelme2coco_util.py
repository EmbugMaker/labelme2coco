import os
import numpy as np
import json
from tqdm import tqdm


def get_files(path, all_file_paths, suffixes):
    """
    :param path: 需要遍历的根目录
    :param all_file_paths: 一个空列表，用于存放搜索的文件路径
    :param suffixes: 需要搜索的文件后缀名
    :return: 根据后缀名搜索到的所有文件的路径
    """
    # 首先遍历当前目录所有文件及文件夹
    file_list = os.listdir(path)
    # 准备循环判断每个元素是否是文件夹还是文件，是文件的话，把名称传入list，是文件夹的话，递归
    for file in file_list:
        # 利用os.path.join()方法取得路径全名，并存入cur_path变量，否则每次只能遍历一层目录
        cur_path = os.path.join(path, file)
        # 判断是否是文件夹
        if os.path.isdir(cur_path):
            get_files(cur_path, all_file_paths)
        else:
            # 根据文件后缀名筛选图像路径
            is_img_suffix = [os.path.splitext(file)[-1] == suffix for suffix in suffixes]
            for is_img in is_img_suffix:
                if is_img:
                    all_file_paths.append(cur_path)

    return all_file_paths


class MyEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return super(MyEncoder, self).default(obj)


class to_coco(object):
    def __init__(self, labelme_json_path, coco_json_path, classes, is_bbox=True):
        """
        :param labelme_json_path(list): Label file path generated by labelme
        :param coco_json_path(str): The path of the json file in COCO format
        :param classes(dict): Object type (including background)
        :param is_bbox(bool): Whether to use bounding box to label objects
        """
        self.images = []
        self.categories = []
        self.annotations = []
        self.labelme_json_path = labelme_json_path
        self.coco_json_path = coco_json_path
        self.class_ids = classes
        self.class_id = 0
        self.coco = {}
        self.is_bbox = is_bbox

    def labelme_to_coco(self):
        ann_id = 0
        for num, json_file in enumerate(tqdm(self.labelme_json_path)):
            data = open(json_file, "r")
            data = json.load(data)
            self.images.append(self.get_images(data["imagePath"], data["imageHeight"], data["imageWidth"], num))
            shapes = data["shapes"]
            for shape in shapes:

                if shape["label"] in self.class_ids:
                    pass
                if shape["label"] not in self.class_ids and shape["label"] == "car":
                    self.class_id = self.class_id + 1

                    self.class_ids[shape["label"]] = self.class_id
                    self.categories.append(self.get_categories(shape["label"], self.class_id))

                self.annotations.append(self.get_annotations(shape["points"], num, ann_id, shape["label"]))

                ann_id = ann_id + 1

        self.coco["images"] = self.images
        self.coco["categories"] = self.categories
        self.coco["annotations"] = self.annotations

    def get_images(self, filename, height, width, image_id):
        image = {}
        image["height"] = height
        image['width'] = width
        image["id"] = image_id
        image["file_name"] = filename
        return image

    def get_categories(self, name, class_id):
        category = {}
        category["supercategory"] = "Cancer"
        category['id'] = class_id
        category['name'] = name

        return category

    def get_annotations(self, points, image_id, ann_id, calss_name):
        annotation = {}
        mins = np.amin(points, axis=0)
        maxs = np.amax(points, axis=0)
        wh = maxs - mins
        x = mins[0]
        y = mins[1]
        w = wh[0]
        h = wh[1]
        area = w * h
        if self.is_bbox:
            annotation['segmentation'] = [list(np.asarray(points).flatten()) * 2]
        else:
            annotation['segmentation'] = [list(np.asarray(points).flatten())]
        annotation['iscrowd'] = 0
        annotation['image_id'] = image_id
        annotation['bbox'] = [x, y, w, h]
        annotation['area'] = area
        annotation['category_id'] = self.class_ids[calss_name]
        annotation['id'] = ann_id
        return annotation

    def save_json(self):
        self.labelme_to_coco()
        coco_data = self.coco
        # save json
        json.dump(coco_data, open(self.coco_json_path, 'w'), indent=4, cls=MyEncoder)  # indent=4 更加美观显示
